@font-face {
    font-family: "Norse-font";
    src: url('Norse-Bold.otf');
}

body {
    margin: 0; /* Reset the default */
    padding: 0;
    height: 100vh; /* Set to 100vh so the body uses the whole view instead of defaulting to the component size */
    display: flex;
}

.side-bar { /* Elements are positioned static by default */
    position: relative; /* Explicitly state its relative, so logo can be absolutely positioned against nearest ancestor (relative) */
    width: 27%;
    background-image: url('halie-west-25xggax4bSA-unsplash.jpg');
    background-size: cover; /* auto (retain original size), cover (scaled, crop excess), contain (scaled to fit image, empty space), length (specify dimensions) */
    /* display: flex; */ /* Set so I use justify-content and align-items to center the logo/text, ALSO possible to use transform/translate since position is set to relative */
}

.logo {
    position: absolute;
    display: flex; /* So the logo and odin text can be set side by side */
    background-color: rgb(0, 0, 0, 0.25);
    top: 20%;
    /* padding: 0px; /* If you use padding for top and bottom, you can also use something like 10px 0 to solve same problem as box sizing (where it overflows) */
    width: 100%; /* Can definitely set it 27% width similar to sidebar and credit but this is alternative */
    box-sizing: border-box; /* Include padding and borders in the width calculation to prevent the logo div from overflowing since it is 30% width */
    justify-content: center;
    align-items: center; /* If you get rid of this, the logo is no longer centered since images are inline-level elements, but the odin text is still 
    centered since it is block-level elements by default, it stretches to fill the flex container */
}

#picture {
    height: 120px; /*Images have no default margin and padding values, so you can just set it on this to obtain the desired look */

}

#odin-text {
    font-family: "Norse-font", sans-serif;
    color: white;
    font-size: 90px; /* Can also use rem (relative to root font size) or em (relative to parent font size), if using rem/em and font size is not specified, default is 16px) */
    /* padding: 0px; You can change padding for top and bottom for text instead of picture if you want, no default value for margin and padding */
    margin: 30px 0; /* Get rid of the extra height added to the container div on the top and bottom */
}

/* Note: Margin collapsing, top and bottom margins of blocks are sometimes combined into a single margin whose size is the largest of the two */
/* Note: Baselines and alignment for block and inline level elements can influence that flex container */

#credit {
    color: white;
    position: fixed;
    width: 27%;
    bottom: 10px; /* Set the footer, can use <footer> tag but this is an alternative */
    margin: 0;
    font-size: 15px;
    text-align: center;
    font-weight: bold;
}

.main-content {
    width: 73%;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Since we use flex direction column, main axis is now perpendicular to cross axis */
}

.sign-up {
    display: flex; /* Since I divided the divs into rows and groups, I use flex so the rows can be stacked on each other */
    flex-direction: column;
    box-shadow: 0 5px 5px -5px rgba(0, 0, 0, 0.5), /* Bottom shadow */
                0 -5px 5px -5px rgba(0, 0, 0, 0.1); /* Top shadow */
    padding-bottom: 20px;
    
}

#lets-go, #paragraph-1, #paragraph-2, .create-button { /* Can reference each paragraph/line individually or use the class name, either way works, I've used both to demonstrate */
    padding-left: 50px;
    font-weight: bold;
}

#lets-go {
    font-size: 25px;
}

#paragraph-1 {
    font-size: 25px;
}

#paragraph-2 {
    font-size: 25px;
    padding-bottom: 20px;
}

.header {
    width: 60%;
}
  
.row {
    display: flex; /* Similar idea to the above but for columns this time */
    flex-direction: row;
    margin-bottom: 20px;
}

/* .column {
flex-grow: 1; For equal spacing in the row, add border: 2px dashed black to the column row and sign-up div to see it clearly
} But I will make use of a pseudo-class selector instead*/

div.row .column:nth-child(2) { /* Can just do .column and set the padding if you want */
    padding-left: 60px; /* Selects the divs in the 2nd column and adds padding to the left */
}

div.row .column:nth-child(1) {
    padding-left: 50px;
}

label {
    display: block; /* So the label can take the entire width/line instead of being side by side with the input */
    margin-bottom: 5px;
}

input {
    border: 1px solid #E5E7EB; /* Add a border */
    border-radius: 5px;
}

input:focus {
    box-shadow: 0 0 5px 0 rgba(0, 86, 179, 0.5); /* h-offset, v-offset, blur, spread, color */
}

.error {
    border: 1px solid red; /* Change border color to red */
    box-shadow: none;
}

#password-error {
    font-size: 10px;
    color: red;
    margin: 0;
}

.hidden {
    display: none;
}

button {
    background-color: #596D48;
    color: white;
    width: 160px;
    height: 50px;
    border-radius: 5px;
    border: none;
    font-size: 15px;
    margin-top: 20px;
    font-weight: bold;
}
